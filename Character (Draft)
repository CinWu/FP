//A new turn resets _HasMoved, _HasAttacked, _UsedItem;
import java.util.ArrayList;
import java.io.*;
import java.util.*;

public abstract class Character{

    protected String _Name;
    protected String _Class;
    protected int _Exp;
    protected int _NextLvl;
    protected int _Lvl;
    protected int _HP;
    protected int _MaxHP;
    protected int _MP;
    protected int _MaxMP;
    protected int _InitATK;
    protected int _ATK;
    protected int _InitDEF;
    protected int _DEF;
    protected int _InitSPATK;
    protected int _SPATK;
    protected int _InitSPDEF;
    protected int _SPDEF;
    protected int _InitSPD;
    protected int _SPD;
    protected int _InitACC;
    protected int _ACC;
    protected int _InitEVS;
    protected int _EVS;
    protected int _Magic; //This is for slight MP regen after each turn
    protected String _StatusCondition;
    
    protected int _HPPots;
    protected int _MPPots;
    protected int _StatCures;
    
    protected Weapon _Weapon;
    protected Armor _Armor;
    
    protected ArrayList<Object> _Inventory = new ArrayList<Object>();

    protected int _Move;
    protected String _Left;
    protected String _Right;
    protected String _Forward;
    protected String _Back;

    protected int xcor;
    protected int ycor;

    //*****************Counters*****************

    protected boolean _HasMoved;
    protected boolean _UsedAction; // this will determine whether or not they have used an attack or an item because in games I've played, you normally can't do both in one turn
    protected boolean _IsStandby; //for similar reasons as above, once the player selects a "standby" or "wait" position, they are not allowed to reselect and use the character again, even if they did not move or attack before.
    protected boolean _IsAlive;

    //*******************************************
    
    public Character(){

	_Lvl = 1;
	_NextLvl = 100;
	_Exp = 0;

    }

    //**************All of them gets*************
    
    protected String _Namu2;
    protected String _Namu4;

    public String getName() {
	return _Name;
    }
    public String getNamu1() { return "Attack"; }//...action names
    public abstract String getNamu2();//...action names
    public String getNamu3() { return "Defend"; };//...action names
    public String getNamu4() { return "Item"; }//...action names

    public int getLvl() {
        return _Lvl;
    }
    public int getMaxHP() {
	return _MaxHP;
    }
    public int getHP() {
        return _HP;
    }
    public int getMP() {
        return _MP;
    }
    public int getATK() {
        return _ATK;
    }
    public int getDEF() { 
        return _DEF;
    }
    public int getInitATK() {
        return _InitATK;
    }
    public int getInitDEF() {
        return _InitDEF;
    }
    public int getSPATK() {
        return _ATK;
    }
    public int getSPDEF() {
        return _DEF;
    }
    public int getInitSPATK() {
        return _InitSPATK;
    }
    public int getInitSPDEF() {
        return _InitSPDEF;
    }
    public int getSPD() {
        return _SPD;
    }
    public int getPosX() {
	return xcor;
    }
    public int getPosY() {
	return ycor;
    }
    public boolean usedAction() {
	return _UsedAction;
    }
    public boolean hasMoved() {
	return _HasMoved;
    }
    public boolean isStandby() {
	return _IsStandby;
    }


    //blahblahblah

    //*******************************************
    
    public boolean isAlive() {
        if (_HP <= 0) {
         return false;
        }
        return true;
    }
    
    public void setStandby( boolean q ) {
	_IsStandby = q;
    }

    public void setMoved( boolean q ) {
	_HasMoved = q;
    }

    public void setUsedAct( boolean q ) {
	_UsedAction = q;
    }

    public void setXY( int x, int y ) {

	xcor = x;
	ycor = y;

    }

    public String move( int x, int y ) {

	System.out.println ( x+":"+ y );
	String retStr = xcor + " " + ycor;
        int xDir = x;
        int yDir = y;
	
        if ( Math.abs(xDir - xcor) + Math.abs(yDir - ycor) <= _Move ) {        
	    xcor = x;
	    ycor = y;
	    _HasMoved = true;
	}
	
	else {
	    JFrame no = new JFrame("Stop!");
	    System.out.println("Out of move distance.");
	    JOptionPane.showMessageDialog(no, "Out of move range.");
	}
    }

    //********************ACTIONS*****************************
    //Will each have separate action names depending on job/class

    public abstract void action1(Character c); //Specific for jobs/classes.
    //will most likely be a regular attack using the character's equiped weapon, even the squishy mage's wooden staff that does like 5 damage
           
    public abstract int action2(Character c);//Actions 2 and 3 will probably be MP based. Action 2 will probably be an attack. Or maybe a defense.

    public void action3() {
	gainDEF(5);
	gainSPDEF(5);
	_UsedAction = true;
    }
    
    
    /* public void action4() {
	int i = _Inventory.size();
	if ( i == 0 ) {
	    System.out.println("No items to use!");
	}
	else {
	    String l = "Use which item?\n";
	    for ( int r = 0; r < i ; i++ ) {
		l += "\t" + r + ": " + _Inventory.get(r);
	    }
	    System.out.print( l );
	    _UsedAction = true;
	}
    } */
    
    
    public boolean itemEquals( String s, Item i ) {
        return (s.equals(i.getItemName()));
    }

    public void usePotion( Potion p ) {
        gainHP(p.getHP());
        gainMP(p.getMP());
        if (getCures()) {
            normalize();
        }
        _Inventory.remove(p);
    }
            public void action4() {
            int i = _Inventory.size();

            if ( i == 0 ) {
                System.out.println("No items to use!");
            }
            else {

                String l = "Use which item?\n";

                for ( int r = 0; r < i ; r++ ) {

                    System.out.println( _Inventory.get(r) );
                }
                               String s = readString();
                if ((_Inventory.indexOf(s)) == -1) {
                    System.out.println("You don't have this item!");
                    System.out.println("Try again");
                    action4();
                }

                else if (!((itemEquals( s , HPPotion)) || (itemEquals(s, MPPotion)) ||
                         (itemEquals(s, StatCure)))) {
                    System.out.println("That's not useable in battle! Put it away!");
                    System.out.println("Choose something else");
                    action4();
                }

                else {

                    usePotion( (indexOf(s)));
                }
            }
        }



                _UsedAction = true;
            }
        }



    //********Battle Mechanisms*********
    
    public void lvlUp() {
        
        if ( _Exp >= _NextLvl ) {
        
         _Lvl ++;
         _Exp = _NextLvl - _Exp;
         _NextLvl = 100 + 50*_Lvl;
         System.out.println( "has leveled up!" );
         
	 JFrame yay = new JFrame("LVL");
	 JOptionPane.showMessageDialog(yay, "Level Up!.");


        }
    }
    
    public void gainExp( Character c ) {

        int expGain;

	if ( !( c.isAlive() ) ) {
	    expGain = (int)( c.getLvl()*.6 );
	    _Exp += expGain;
	    lvlUp();
	    System.out.println( "gained" + expGain + "exp!" );
        }
    }

    public int loseHP( int dam ) {
	_HP -= dam;
	if ( _HP < 0 ) 
	    _HP = 0;
	return _HP;
    }
    public int loseMP( int m ) {
	_MP -= m;
	if ( _MP < 0 )
	    _MP = 0;
	return _MP;
    }
    public int loseATK( int a ) {
	_ATK -= a;
	return _ATK;
    }
    public int loseDEF( int d ) {
	_DEF -= d;
	return _DEF;
    }
    public int loseSPATK( int spa ) {
	_SPATK -= spa;
	return _SPATK;
    }
    public int loseSPDEF( int spd ) {
	_SPDEF -= spd;
	return _SPDEF;
    }
    public int loseSPD( int s ) {
	_SPD -= s;
	return _SPD;
    }
    public int loseEVS( int evs ) {
	_EVS -= evs;
	return _EVS;
    }
    public int loseACC( int acc ) {
	_ACC -= acc;
	return _ACC;
    }
    public int gainHP( int h ) {
	_HP += h;
	if ( _HP > _MaxHP ) {
	    _HP = _MaxHP;
	}
	return _HP;	
    }
    public int gainMP( int m ) {
	_MP += m;
	if ( _MP > _MaxMP ) {
	    _MP = _MaxMP;
	}
	return _HP;	
    }
    public int gainATK( int a ) {
	_ATK += a;
	return _ATK;
    }
    public int gainDEF( int d ) {
	_DEF += d;
	return _DEF;
    }
    public int gainSPATK( int spa ) {
	_SPATK += spa;
	return _SPATK;
    }
    public int gainSPDEF( int spd ) {
	_SPDEF += spd;
	return _SPDEF;
    }
    public int gainSPD( int s ) {
	_SPD += s;
	return _SPD;
    }
    public int gainEVS( int evs ) {
	_EVS += evs;
	return _EVS;
    }
    public int gainACC( int acc ) {
	_ACC += acc;
	return _ACC;
    }

    public int attack( Character c, int lo, int hi, int dam, int x, int y ) {
	
	if ( Math.abs( c.getPosX() - x ) + Math.abs( c.getPosY() - y ) >= lo
	     &&
	     Math.abs( c.getPosX() - x ) + Math.abs( c.getPosY() - y ) <= hi
	     ) {
	    System.out.println( "Success" );
	    c.loseHP(dam);
	    gainExp( c );
	    _UsedAction = true;
	}
	else 
	    System.out.println( "Target not within range." );
	
	return dam;
    }
    
            public String statusConditionEffect() {
            String retStr = "";
            if (_StatusCondition.equals("Poisoned")) {
                loseHP(3);
                retStr = "Poisoning hurts.";
            }
            else if (_StatusCondition.equals("Paralyzed")) {
                _Move = 0;
                retStr = "I can't move. Curse you paralysis...";
            }

        }

        public String normalize() {
            String retStr = "You're status condition has disappeared. Hooray!";
            _StatusCondition = "None";
            _Move = _InitMove;
            return retStr;
        }
    

    public String toString() {
	String s = "<html><font size = 2>=======Stats=======";
	s += "\n<br>Name: " + _Name;
	s += "\n<br>Class: " + _Class;
	s += "\n<br>Level: " + _Lvl;
	s += "\n<br>Next Level: " + (_NextLvl - _Exp);
	s += "\n<br>HP: " + _HP;
	s += "\n<br>MP: " + _MP;
	s += "\n<br>Attack: " + _ATK;
	s += "\n<br>Magic: " + _SPATK;
	s += "\n<br>Defense: " + _DEF;	
	s += "\n<br>Magic Defense: " + _SPDEF;	
	s += "\n<br>Speed: " + _SPD;	
	s += "\n<br>Accuracy: " + _ACC;	
	s += "\n<br>Evasion: " + _EVS;
	s += "\n<br>===================\n\n</html>";
	return s;
    }
}

