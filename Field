import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.EventObject;
import java.util.ArrayList;

public class Field extends Game {

    //This will be the "finished piece"
    JFrame full = new JFrame();

    //Panel is used to create the field and paste it in the CENTER of the JFrame
    JPanel field = new JPanel();

    JPanel actPan = new JPanel(new FlowLayout(FlowLayout.CENTER));
    
    JButton[][] grid; //names the grid of buttons

    
    JButton stats;
    JButton mov;
    JButton act;
    JButton stby;

    JFrame actList = new JFrame("Actions");
    JButton act1;
    JButton act2;
    JButton act3;
    JButton act4;


    ArrayList<Character> cTeam;
    ArrayList<Character> pTeam;

    public Field( int w, int l, Player p ) {

       	field.setLayout( new GridLayout(w,l) ); //set layout

	//**********Makes grid of JButtons, gives JButtons their names from their coords and make them listen for some event(click) to happen;
	grid = new JButton[w][l];
	for( int y = 0; y < l; y++ ){
	    for( int x = 0; x < w; x++ ){
		grid[x][y] = new JButton("("+x+","+y+")"); //creates new button
		grid[x][y].setName( x + ", " + y );
		grid[x][y].addActionListener(new GridListener());
		field.add(grid[x][y]); //adds button to grid
	    }
	}

	full.getContentPane().add( BorderLayout.CENTER, field );

	//*************CREATE ACTPAN FOR SELECTING ACTIONS************
	
	actPan.setPreferredSize( new Dimension ( 150, 550 ) ); 
	
	mov = new JButton("Move");
	mov.setPreferredSize(new Dimension(100,20));
	mov.addActionListener(new ClickAction());
	act = new JButton("Action");
	act.setPreferredSize(new Dimension(100,20));
	act.addActionListener(new ActListener());
	stby = new JButton("Standby");
	stby.setPreferredSize(new Dimension(100,20));
	stby.addActionListener(new ClickAction());

	stats = new JButton("Stats");
	stats.setPreferredSize(new Dimension(150,400));
	stats.addActionListener(new GridListener());

	actPan.add( act );
	actPan.add( mov );
	actPan.add( stby );
	actPan.add( stats );

	full.getContentPane().add( BorderLayout.EAST, actPan );

	//**************************************************

	Computer newCpu = new Computer();
	addComp( newCpu );
	addPlay( p );
	setPos();

	//               field.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	full.setSize(700,550); 
	full.setVisible(true);
	full.setResizable(false);


    }

    //=========HELPER FUNCTIONS===========

    protected boolean _isCpu = false;

    //=========List of Teams==========
    public void addComp( Computer cpu ) {
	cTeam = cpu.getTeam();
    }
	
    public void addPlay( Player pl ) {
	pTeam = pl.getTeam();
    }

    //===========Search for characters on a square=======
    public boolean anyChars( int x, int y ) {

	for ( int i = 0; i < cTeam.size(); i++ ) {
	    if ( cTeam.get(i).getPosX() == x && cTeam.get(i).getPosY() == y )
		return true;
	}
	for ( int i = 0; i < pTeam.size(); i++ ) {
	    if ( pTeam.get(i).getPosX() == x && pTeam.get(i).getPosY() == y ) {
		return true;
	    }
	}
	return false;
    }

    //=========List Character on square=========
    public Character listChar( int x, int y ) {
	if ( !anyChars(x,y) )
	    return null;

	for ( int i = 0; i < cTeam.size(); i++ ) {
	    if ( cTeam.get(i).getPosX() == x && cTeam.get(i).getPosY() == y ) {
		_isCpu = true;
		return cTeam.get(i);
	    }
	}
	for ( int i = 0; i < pTeam.size(); i++ ) {
	    if ( pTeam.get(i).getPosX() == x && pTeam.get(i).getPosY() == y ) {
		_isCpu = false;
		return pTeam.get(i);
	    }
	}
	return null;
    }

    //=================SET CHARACTER POSITION ON RANDOM MAP SQUARE=============

    public void setPos() {
	for ( Character x : cTeam ) {
	    setOnMapC( x );
	}
	for ( Character x : pTeam ) {
	    setOnMapP( x );
	}	
    }
    
    public void setOnMapC( Character x ) {
    	int xcoor = (int)(grid.length*.75)+(int)(Math.random()*grid.length*.25);
    	int ycoor = (int)(grid[0].length*.75)+(int)(Math.random()*grid[0].length*.25);
    	if ( !anyChars(xcoor,ycoor) ){
      	    grid[xcoor][ycoor].setText("hi");
    	    x.setXY( xcoor, ycoor ); 
    	}
	else { setOnMapC( x ); };
    }

    public void setOnMapP( Character x ) {
    	int xcor = (int)(Math.random()*grid.length*.25);
    	int ycor = (int)(Math.random()*grid[0].length*.25);

    	if ( !anyChars(xcor,ycor) ){
	    grid[xcor][ycor].setText("hi");
    	    x.setXY( xcor, ycor ); 
    	}
	else { setOnMapP( x ); };
    }

    //========================================================

    class GridListener implements ActionListener {

	public void actionPerformed( ActionEvent event ) {
	
	    JButton source = (JButton)event.getSource();
	    JFrame nope;

	    if ( source != act1 && source != act2 &&
		 source != act3 && source != act4 ) { 
		//Button's x and y coordinates
		int bx = 0;
		int by = 0;

		//Successfully returns the button's x and y coords!
		//event.getSource taken from util.EventObject finds the name of the button that was clicked. So you go through the grid searching for that button and later get its x and y coord

		for ( int x = 0; x < grid.length; x++ ) {
		    for ( int y = 0; y < grid[0].length; y++ ) {
			if( grid[x][y] == source ) { 
			    bx = x;
			    by = y;
			}
		    }
		}
 
		if ( listChar( bx, by ) == null 
		     ||
		     listChar( bx, by ).isStandby() ) {
		    
		    //MOVE TO NEW POSITION IF POSSIBLE
		  
		    if ( _SelectMove && anyChars( bx, by ) ) {
			JFrame no = new JFrame("STOP!");
			System.out.println("Cannot move here.");
			JOptionPane.showMessageDialog(no, "No.");
			_SelectMove = false;
		    }

		    else if ( listChar( bx, by ) == null && _SelectMove ) {
						
			_SelectMove = false;
			selection.move( bx, by );

		    }
		    
		    //RETURN THE STATS
		    else if ( anyChars( bx, by ) ) {

			act2.setText(listChar( bx, by ).toString());
			stats.setText(listChar( bx, by ).toString());
		    }
		}
		    
		else if ( _isCpu ) {
		    stats.setText(listChar( bx, by ).toString());
		    act2.setText(listChar( bx, by ).toString());

		    if ( _ClickAct ) {
			target = listChar( bx, by );
			selection.action1(target);
			_ClickAct = false;
		    }
		}
	    
		else {
		    stats.setText(listChar( bx, by ).toString());

		    if ( _ClickAct ) {
			target = listChar( bx, by );
			_ClickAct = false;
			if ( _WhichAct == 1 ) 
			    selection.action1(target);

			else if ( _WhichAct == 2 )
			    if ( selection instanceof Scout || 
				 selection instanceof Warrior )
				target = selection;

			    selection.action2(target);
		    }

		    else 
			selection = ( listChar( bx, by ) );
		    
		}  
	    }
	}
    }
  //=============Perform actions==================

    class ClickAction implements ActionListener {
	
	public void actionPerformed ( ActionEvent event ) {
	    JButton source = (JButton)event.getSource();
	    if ( source.equals( act1 ) && selection != null ) {
	    	_ClickAct = true;
	    	_WhichAct = 1;
		actList.dispose();
	    }
	    
	    else if ( source.equals( act2 ) && selection != null ) {
	    	_ClickAct = true;
	    	_WhichAct = 2;
		actList.dispose();
	    }
	    else if ( source.equals( act3 ) && selection != null ) {
	    	_ClickAct = true;
	    	selection.action3();
		actList.dispose();
	    }
	    else if ( source.equals( act4 ) && selection != null ) {
	    	_ClickAct = true;
	    	selection.action4();
		actList.dispose();
	    }
	    else if ( source.equals( mov ) 
		      && selection != null 
		      && !(selection.hasMoved()) ) {
	        _SelectMove = true;
	    }
	    else if ( source.equals( stby ) && selection != null ) {
		selection.setStandby(true);
	    }
	}
    }

    class ActListener implements ActionListener {
	
	public ActListener() {
	    
	    actList.setLayout( new GridLayout( 2,2 ) );
	    

	    //buttons-Buttons-BUTTONS!
	    act1 = new JButton("Attack");
	    act1.addActionListener(new ClickAction());
	    act2 = new JButton("???");
	    act2.addActionListener(new ClickAction());
	    act3 = new JButton("Defend");
	    act3.addActionListener(new ClickAction());
	    act4 = new JButton("Items");
	    act4.addActionListener(new ClickAction());
	    actList.add( act1 );
	    actList.add( act2 );
	    actList.add( act3 ); 
	    actList.add( act4 );
	    //=========================
	
	}

	public void actionPerformed ( ActionEvent event ) {

	    if ( selection != null && selection.usedAction() ) { 
		System.out.println("Cannot act more than once in a single turn.");
		JFrame no = new JFrame("STOP!");
		JOptionPane.showMessageDialog(no, "Cannot act more than once in a single turn.");
		}
	    else {
		//MAKE SCREEN POP UP!
		actList.setSize(200,100);
		actList.setVisible(true);
		actList.setResizable(false);
		
		act2.setText( selection.getNamu2() );
	    }
	}
    }
    public static void main ( String args[] ) {
	Player dude = new Player();
	Field testmap = new Field(10,10,dude);
    }
}

