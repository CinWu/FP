import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.EventObject;
import java.util.ArrayList;

public class Field extends Game {

    //=====keep track of things
    protected int turns = 0;
    protected boolean playersTurn = true;
    protected Player crntPlay;
    //==========================

    //==========random computer is random
    protected Character rChar;
    protected int rChoice;
    protected int rAct;
    protected int rMoveX;
    protected int rMoveY;
    //===================================

    //This will be the "finished piece"
    protected JFrame full = new JFrame();

    //Panel is used to create the field and paste it in the CENTER of the JFrame
    protected JPanel field = new JPanel();

    protected JPanel actPan = new JPanel(new FlowLayout(FlowLayout.CENTER));
    
    protected JButton[][] grid; //names the grid of buttons

    
    protected JButton stats;
    protected JButton mov;
    protected JButton act;
    protected JButton stby;
    protected JButton end;

    protected JFrame actList = new JFrame("Actions");
    protected JButton act1;
    protected JButton act2;
    protected JButton act3;
    protected JButton act4;


    ArrayList<Character> cTeam;
    ArrayList<Character> pTeam;

    public Field() {}

    public Field( int w, int l, Player p ) {

	crntPlay = p;
	field.setLayout( new GridLayout(w,l) ); //set layout

        //**********Makes grid of JButtons, gives JButtons their names from their coords and make them listen for some event(click) to happen;
        grid = new JButton[w][l];
        for( int y = 0; y < l; y++ ){
	    for( int x = 0; x < w; x++ ){
                grid[x][y] = new JButton("("+x+","+y+")"); //creates new button
                grid[x][y].setName(x + ", " + y );
		grid[x][y].setBackground( Color.green.darker() );
                grid[x][y].setText( "" );
                grid[x][y].addActionListener(new GridListener());
                field.add(grid[x][y]); //adds button to grid
	    }
        }

        full.getContentPane().add( BorderLayout.CENTER, field );

        //*************CREATE ACTPAN FOR SELECTING ACTIONS************
        
        actPan.setPreferredSize( new Dimension ( 150, 550 ) );
        
        mov = new JButton("Move");
        mov.setPreferredSize(new Dimension(100,20));
        mov.addActionListener(new ClickAction());
        act = new JButton("Action");
        act.setPreferredSize(new Dimension(100,20));
        act.addActionListener(new ActListener());
        stby = new JButton("Standby");
        stby.setPreferredSize(new Dimension(100,20));
        stby.addActionListener(new ClickAction());
        end = new JButton("End Turn");
        end.setPreferredSize(new Dimension(100,20));
        end.addActionListener(new ClickAction());

        stats = new JButton("Stats");
        stats.setPreferredSize(new Dimension(150,400));
        stats.addActionListener(new GridListener());

        actPan.add( act );
        actPan.add( mov );
        actPan.add( stby );
        actPan.add( end );
        actPan.add( stats );

        full.getContentPane().add( BorderLayout.EAST, actPan );

        full.setSize(700,550);
        full.setVisible(true);
        full.setResizable(false);
        
    }

    public void Go() {

        Computer newCpu = new Computer();
        addComp( newCpu );
        addPlay( crntPlay );
        setPos();

	while ( !isDeadP() && !isDeadC() ) {
	    
	    while ( !stbyP() && !stbyC() ) {

                while ( !stbyP() ) {
                
		    playersTurn = true;
                
                }
                playersTurn = false;        
                randomize();
	    }
	    retVars();
	    turns++;
	    
        }
    }

    //=========HELPER FUNCTIONS===========

    protected boolean _isCpu = false;
    
    public void moveHelper( Character c, int x, int y ) {
        String oldCor = c.move( x, y );
        int dividingLine = oldCor.indexOf(" ");
        
        int olX = Integer.parseInt( oldCor.substring( 0, dividingLine ) );
        int olY = Integer.parseInt( oldCor.substring( dividingLine+1 ) );
        
	    //Set button icons
	if ( c.hasMoved() ) { 
	    grid[olX][olY].setIcon( null );
	    grid[x][y].setIcon( new ImageIcon( "Char.jpg" ) );
	}
	
    }
    
    public void steps( Character c, int x, int y ) {
	int timeLoop = 0;
        int dispX = x - c.getPosX();
        int dispY = y - c.getPosY();
        int disp = Math.abs(dispX) + Math.abs(dispY);
        if ( !c.hasMoved() && disp <= c.getMove() ) {
	    while ( disp > 0 && timeLoop < 10 ) {
		timeLoop = 0;

                while ( Math.abs(dispX) > 0 && timeLoop < 5 ) {
		    if ( dispX > 0
			 // && 
			 // !anyChars(c.getPosX()+1, c.getPosY())
			 // &&
			 // !( grid[c.getPosX()+1][c.getPosY()].getName()
			 //    .equals("Terrain") )
			 ){

                        moveHelper( c, ( c.getPosX()+1 ),
				    ( c.getPosY() ) );
                        dispX--;
		    }
		    else if ( dispX < 0
			      // && 
			      // !anyChars(c.getPosX()-1, c.getPosY())
			      // &&
			      // !( grid[c.getPosX()-1][c.getPosY()].getName()
			      // 	 .equals("Terrain") )
			      ) {
                        moveHelper( c, ( c.getPosX()-1 ),
				    ( c.getPosY() ) );
                        dispX++;
		    }
		    // try { Thread.currentThread().sleep(1000); }
		    // catch ( Exception e ) { }
		    //		    timeLoop++;
                }                
                while ( Math.abs(dispY) > 0 && timeLoop < 5 ) {
		    if ( dispY > 0
			 // && 
			 // !anyChars(c.getPosX(), c.getPosY()+1)
			 // &&
			 // !( grid[c.getPosX()][c.getPosY()+1].getName()
			 //    .equals("Terrain") )
			 ) {
                        moveHelper( c, ( c.getPosX() ),
				    ( c.getPosY()+1 ) );
                        dispY--;
		    }
		    else if ( dispY < 0
			      // && 
			      // !anyChars(c.getPosX()+1, c.getPosY())
			      // &&
			      // !( grid[c.getPosX()][c.getPosY()-1].getName()
			      // 	 .equals("Terrain") )
			      ) {
                        moveHelper( c, ( c.getPosX() ),
				    ( c.getPosY()-1 ) );
                        dispY++;
		    }
		    // try { Thread.currentThread().sleep(1000); }
		    // catch ( Exception e ) { }
		    timeLoop++;
                }
                disp = Math.abs(dispX) + Math.abs(dispY);
	    }
	    c.setMoved(true);
        }
    }
                

    //========RETURN VALUES OF VARIABLES AFTER TURN=======
    public void retVars() {
        for ( int i = 0; i < cTeam.size(); i++ ) {
	    cTeam.get(i).gainMP( cTeam.get(i)._Magic );
	    cTeam.get(i).setStandby( false );
	    cTeam.get(i).setMoved( false );
	    cTeam.get(i).setUsedAct( false );
        }
        for ( int i = 0; i < pTeam.size(); i++ ) {
	    pTeam.get(i).gainMP( pTeam.get(i)._Magic );
	    pTeam.get(i).setStandby( false );
	    pTeam.get(i).setMoved( false );
	    pTeam.get(i).setUsedAct( false );
        }

        _ClickAct = false;
        _WhichAct = 0;
        _SelectMove = false;
        _CTeamStby = false;
        _PTeamStby = false;
        selection = null;
        target = null;
    }

    //=========List of Teams==========
    public void addComp( Computer cpu ) {
        cTeam = cpu.getTeam();
    }
        
    public void addPlay( Player pl ) {
        pTeam = pl.getTeam();
    }

    //=========Is team Dead?============
    
    public boolean isDeadC() {
        return cTeam.size() == 0;
    }

    public boolean isDeadP() {
        return pTeam.size() == 0;
    }

    public void dispose( Character c ) {
        for ( int i = 0; i < cTeam.size() || i < pTeam.size(); i++ ) {
	    if ( i < cTeam.size() && cTeam.get(i).equals( c ) ) {
                cTeam.remove(i);
                grid[cTeam.get(i).getPosX()][cTeam.get(i).getPosY()].setIcon(null) ;
	    }
	    else if ( i < pTeam.size() && pTeam.get(i).equals( c ) ) {
                pTeam.remove(i);
                grid[pTeam.get(i).getPosX()][pTeam.get(i).getPosY()].setIcon(null) ;
	    }
        }
    }

    //=========Is Team Standby?===========
    public boolean stbyC() {
        for ( int i = 0; i < cTeam.size(); i++ ) {
	    if ( !(cTeam.get(i).isStandby()) )
                return false;
        }
        return true;
    }

    public boolean stbyP() {
        for ( int i = 0; i < cTeam.size(); i++ ) {
	    if ( !(pTeam.get(i).isStandby()) )
                return false;
        }
        return true;
    }

    public boolean nextTurn() {
        return stbyP() && stbyC();
    }

    //===========Search for characters on a square=======
    public boolean anyChars( int x, int y ) {

        for ( int i = 0; i < cTeam.size(); i++ ) {
	    if ( cTeam.get(i).getPosX() == x && cTeam.get(i).getPosY() == y )
                return true;
        }
        for ( int i = 0; i < pTeam.size(); i++ ) {
	    if ( pTeam.get(i).getPosX() == x && pTeam.get(i).getPosY() == y ) {
                return true;
	    }
        }
        return false;
    }

    //=========List Character on square=========
    public Character listChar( int x, int y ) {
        if ( !anyChars(x,y) )
	    return null;

        for ( int i = 0; i < cTeam.size(); i++ ) {
	    if ( cTeam.get(i).getPosX() == x && cTeam.get(i).getPosY() == y ) {
                _isCpu = true;
                return cTeam.get(i);
	    }
        }
        for ( int i = 0; i < pTeam.size(); i++ ) {
	    if ( pTeam.get(i).getPosX() == x && pTeam.get(i).getPosY() == y ) {
                _isCpu = false;
                return pTeam.get(i);
	    }
        }
        return null;
    }

    //=================SET CHARACTER POSITION ON RANDOM MAP SQUARE=============

    public void setPos() {
        for ( Character x : cTeam ) {
	    setOnMapC( x );
        }
        for ( Character x : pTeam ) {
	    setOnMapP( x );
        }        
    }
    
    public void setOnMapC( Character x ) {
	int xcor = (int)(grid.length*.75)+(int)(Math.random()*grid.length*.25);
	int ycor = (int)(grid[0].length*.75)+(int)(Math.random()*grid[0].length*.25);
	if ( !anyChars(xcor,ycor) && !grid[xcor][ycor].getName().equals("Terrain") ){
	    grid[xcor][ycor].setIcon( new ImageIcon( "Char.jpg" ) );
	    x.setXY( xcor, ycor );
        }
        else { setOnMapC( x ); }
    }

    public void setOnMapP( Character x ) {
	int xcor = (int)(Math.random()*grid.length*.25);
	int ycor = (int)(Math.random()*grid[0].length*.25);

	if ( !anyChars(xcor,ycor) && !grid[xcor][ycor].getName().equals("Terrain")){
	    grid[xcor][ycor].setIcon( new ImageIcon( "Char.jpg" ) );
	    x.setXY( xcor, ycor );
	}
        else { setOnMapP( x ); }
    }

    //========================================================

    class GridListener implements ActionListener {

        public void actionPerformed( ActionEvent event ) {
        
	    JButton source = (JButton)event.getSource();
	    JFrame nope;

	    if ( playersTurn &&
                 source != act1 && source != act2 &&
                 source != act3 && source != act4 ) {
                //Button's x and y coordinates
                int bx = 0;
                int by = 0;

                //Successfully returns the button's x and y coords!
                //event.getSource taken from util.EventObject finds the name of the button that was clicked. So you go through the grid searching for that button and later get its x and y coord

                for ( int x = 0; x < grid.length; x++ ) {
		    for ( int y = 0; y < grid[0].length; y++ ) {
                        if( grid[x][y] == source ) {
			    bx = x;
			    by = y;
                        }
		    }
                }
 
                if ( listChar( bx, by ) == null
		     ||
		     listChar( bx, by ).isStandby() ) {
		    
		    //MOVE TO NEW POSITION IF POSSIBLE
                
		    if ( _SelectMove 
			 && 
			 ( anyChars( bx, by ) 
			   || 
			   grid[bx][by].getName().equals("Terrain") )  ) {
                        JFrame no = new JFrame("STOP!");
                        System.out.println("Cannot move here.");
                        JOptionPane.showMessageDialog(no, "Cannot move here.");
                        _SelectMove = false;
		    }
		    
		    else if ( listChar( bx, by ) == null && _SelectMove ) {
                                                
                        _SelectMove = false;
                        
			moveHelper( selection, bx, by );
		    }
                

		    //RETURN THE STATS
		    else if ( anyChars( bx, by ) ) {

                        act2.setText(listChar( bx, by ).toString());
                        stats.setText(listChar( bx, by ).toString());
		    }
                }
                
                else if ( _isCpu ) {
		    stats.setText(listChar( bx, by ).toString());
		    act2.setText(listChar( bx, by ).toString());

		    if ( _ClickAct ) {
                        target = listChar( bx, by );
                        selection.action1(target);
                        _ClickAct = false;
		    }
                }
        
                else {
		    stats.setText(listChar( bx, by ).toString());

		    if ( _ClickAct ) {
                        target = listChar( bx, by );
                        _ClickAct = false;
                        if ( _WhichAct == 1 )
			    selection.action1(target);

                        else if ( _WhichAct == 2 )
			    if ( selection instanceof Scout ||
                                 selection instanceof Warrior )
                                target = selection;
			System.out.println(selection);
			System.out.println(selection.getNamu2());
			selection.action2(target);
		    }

		    else
                        selection = ( listChar( bx, by ) );
                
                }
	    }
        }
    }
    //=============Perform actions==================

    class ClickAction implements ActionListener {
        
        public void actionPerformed ( ActionEvent event ) {
	    JButton source = (JButton)event.getSource();
	    if ( source.equals( act1 ) && selection != null ) {
		_ClickAct = true;
		_WhichAct = 1;
                actList.dispose();
	    }
        
	    else if ( source.equals( act2 ) && selection != null ) {
		_ClickAct = true;
		_WhichAct = 2;
                actList.dispose();
	    }

	    else if ( source.equals( act3 ) && selection != null ) {
		_ClickAct = true;
		selection.action3();
                actList.dispose();
	    }

	    else if ( source.equals( act4 ) && selection != null ) {
		_ClickAct = true;
		selection.action4();
                actList.dispose();
	    }

	    else if ( source.equals( mov )
		      && selection != null
		      && !(selection.hasMoved())
		      && !(selection.isStandby()) ) {
		_SelectMove = true;
	    }

	    else if ( source.equals( stby ) && selection != null ) {
                selection.setStandby(true);
	    }

	    else if ( source.equals( end ) ) {
                for ( int i = 0; i < pTeam.size(); i++ ) {
		    pTeam.get(i).setStandby(true);
                }
                
	    }
        
        }

    }

    class ActListener implements ActionListener {
        
        public ActListener() {
        
	    actList.setLayout( new GridLayout( 2,2 ) );
        

	    //buttons-Buttons-BUTTONS!
	    act1 = new JButton("Attack");
	    act1.addActionListener(new ClickAction());
	    act2 = new JButton("???");
	    act2.addActionListener(new ClickAction());
	    act3 = new JButton("Defend");
	    act3.addActionListener(new ClickAction());
	    act4 = new JButton("Items");
	    act4.addActionListener(new ClickAction());
	    actList.add( act1 );
	    actList.add( act2 );
	    actList.add( act3 );
	    actList.add( act4 );
	    //=========================
        
        }

        public void actionPerformed ( ActionEvent event ) {

	    if ( selection != null && selection.usedAction() ) {
                System.out.println("Cannot act more than once in a single turn.");
                JFrame no = new JFrame("STOP!");
                JOptionPane.showMessageDialog(no, "Cannot act more than once in a single turn.");
	    }
        

	    else if ( selection != null && !(selection.isStandby()) ) {
                //MAKE SCREEN POP UP!
                actList.setSize(200,100);
                actList.setVisible(true);
                actList.setResizable(false);
                
                act2.setText( selection.getNamu2() );
        
	    }
        }
    }

    //++++++++++++++RANDOM COMPUTER IS RANDOM++++++++++++++
    public void randomize() {
        int max = 30;
        for ( int i = 0; i < cTeam.size() && max > 0 ; i++ ) {
	    max = 30;
	    rChar = cTeam.get(i);
	    rChoice = (int) ( Math.random()*3 );
	    while ( !rChar.isStandby() ) {
                max --;
                if ( rChoice == 0 && !rChar.hasMoved() ) {
		    rMoveX = ( (int)(rChar.getMove()*Math.random()) );
		    rMoveY = rChar.getMove() - rMoveX;

		    if ( rChar.getPosX() + rMoveX < grid.length	       	 
                         && rChar.getPosX() + rMoveX > 0
                         && rChar.getPosY() + rMoveY < grid[0].length
                         && rChar.getPosY() + rMoveY > 0 
			 && !anyChars( rChar.getPosX()+rMoveX, rChar.getPosY()+rMoveY )
			 && !grid[rChar.getPosX()+rMoveX][rChar.getPosY()+rMoveY].getName().equals("Terrain")
			 ) {

                        moveHelper(rChar, rChar.getPosX()+rMoveX, rChar.getPosY() + rMoveY);
		    }

		    else if ( rChar.getPosX() - rMoveX < grid.length
			      && rChar.getPosX() - rMoveX > 0
			      && rChar.getPosY() + rMoveY < grid[0].length
			      && rChar.getPosY() + rMoveY > 0
			      && !anyChars( rChar.getPosX()-rMoveX, rChar.getPosY()+rMoveY )
			      && !grid[rChar.getPosX()-rMoveX][rChar.getPosY()+rMoveY].getName().equals("Terrain")
			      ) {

                        moveHelper(rChar, rChar.getPosX()-rMoveX, rChar.getPosY()+rMoveY);
		    }

		    else if ( rChar.getPosX() + rMoveX < grid.length
			      && rChar.getPosX() + rMoveX > 0
			      && rChar.getPosY() - rMoveY < grid[0].length
			      && rChar.getPosY() - rMoveY > 0
			      && !anyChars( rChar.getPosX()+rMoveX, rChar.getPosY()-rMoveY )
			      && !grid[rChar.getPosX()+rMoveX][rChar.getPosY()-rMoveY].getName().equals("Terrain")
			      ) {

                        moveHelper(rChar, rChar.getPosX()+rMoveX, rChar.getPosY()-rMoveY);
		    }

		    else if ( rChar.getPosX() - rMoveX < grid.length
			      && rChar.getPosX() - rMoveX > 0
			      && rChar.getPosY() - rMoveY < grid[0].length
			      && rChar.getPosY() - rMoveY > 0
			      && !anyChars( rChar.getPosX()+rMoveX, rChar.getPosY()+rMoveY )
			      && !grid[rChar.getPosX()-rMoveX][rChar.getPosY()-rMoveY].getName().equals("Terrain")
			      ) {

                        moveHelper(rChar, rChar.getPosX()-rMoveX, rChar.getPosY()-rMoveY);
		    }
                }
        
                else if ( rChoice == 1 && !rChar.usedAction() ) {
		    rAct = (int)(Math.random()*4);
        
		    if ( rAct == 0 ) {
                        for ( int k = 0; k < pTeam.size() && !rChar.usedAction(); k++ ) {
			    rChar.action1(pTeam.get(k));
                        }
                        rChar.setUsedAct( true );
		    }
		    else if ( rAct == 2 && !rChar.usedAction() ) {
                        for ( int j = 0; j < pTeam.size() && !rChar.usedAction(); j++ ) {

			    rChar.action2(pTeam.get(j));
                        }
                        rChar.setUsedAct( true );
		    }
		    else if ( rAct == 3 && !rChar.usedAction()) {
                        rChar.action3();
		    }
                }
                else {
		    rChar.setStandby(true);
                }
                rChar.setStandby(true);
	    }
        }
    }

    /*+++++++++++++++++++++++++++++++++++++++++++++++++++++

    public static void main ( String args[] ) {
        Player dude = new Player();
        Field testmap = new Field(25,25,dude);
    }*/
}
