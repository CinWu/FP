//Hopefully I remember things I did so that I can deal with them in the morning.
//Such as now field has input player p to set the player's team before a match
//Field needs to set Computer's random positions
//Perhaps even player's?


import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.EventObject;
import java.util.ArrayList;

public class Field extends Game implements ActionListener {

    //This will be the "finished piece"
    JFrame full = new JFrame();

    //Panel is used to create the field and paste it in the CENTER of the JFrame
    JPanel field = new JPanel();

    JPanel actPan = new JPanel(new FlowLayout(FlowLayout.CENTER));
    
    JButton[][] grid; //names the grid of buttons
    JButton[][] actions = new JButton[3][2];
    JButton stats;
    JButton act1;
    JButton act2;
    JButton act3;
    JButton act4;

    ArrayList<Character> cTeam;
    ArrayList<Character> pTeam;

    public Field( int w, int l, Player p ) {

       	field.setLayout( new GridLayout(w,l) ); //set layout

	//**********Makes grid of JButtons, gives JButtons their names from their coords and make them listen for some event(click) to happen;
	grid = new JButton[w][l];
	for( int y = 0; y < l; y++ ){
	    for( int x = 0; x < w; x++ ){
		grid[x][y] = new JButton("("+x+","+y+")"); //creates new button
		grid[x][y].setName( x + ", " + y );
		grid[x][y].addActionListener(this);
		field.add(grid[x][y]); //adds button to grid
	    }
	}

	full.getContentPane().add( BorderLayout.CENTER, field );

	//*************CREATE ACTPAN FOR SELECTING ACTIONS************
	
	actPan.setPreferredSize( new Dimension ( 150, 550 ) ); 
	
	act1 = new JButton("Attack");
	act1.setPreferredSize(new Dimension(100,20));
	act1.addActionListener(this);
	act2 = new JButton("???");
	act2.setPreferredSize(new Dimension(100,20));
	act2.addActionListener(this);
	act3 = new JButton("Defend");
	act3.setPreferredSize(new Dimension(100,20));
	act3.addActionListener(this);
	act4 = new JButton("Items");
	act4.setPreferredSize(new Dimension(100,20));
	act4.addActionListener(this);
	stats = new JButton("Stats");
	stats.setPreferredSize(new Dimension(150,400));
	stats.addActionListener(this);
	actPan.add( act1 );
	actPan.add( act2 );
	actPan.add( act3 );
	actPan.add( act4 );
	actPan.add( stats );


	full.getContentPane().add( BorderLayout.EAST, actPan );

	//**************************************************

	Computer newCpu = new Computer();
	addComp( newCpu );
	addPlay( p );
	setPos();

	//               field.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	full.setSize(1000,550); 
	full.setVisible(true);
	full.setResizable(false);


    }

    //=========HELPER FUNCTIONS===========

    protected boolean _isCpu = false;

    //=========List of Teams==========
    public void addComp( Computer cpu ) {
	cTeam = cpu.getTeam();
    }
	
    public void addPlay( Player pl ) {
	pTeam = pl.getTeam();
    }

    //===========Search for characters on a square=======
    public boolean anyChars( int x, int y ) {

	for ( int i = 0; i < cTeam.size(); i++ ) {
	    if ( cTeam.get(i).getPosX() == x && cTeam.get(i).getPosY() == y )
		return true;
	}
	for ( int i = 0; i < pTeam.size(); i++ ) {
	    if ( pTeam.get(i).getPosX() == x && pTeam.get(i).getPosY() == y ) {
		return true;
	    }
	}
	return false;
    }

    //=========List Character on square=========
    public Character listChar( int x, int y ) {
	if ( !anyChars(x,y) ) {
	    return null;
	}

	for ( int i = 0; i < cTeam.size(); i++ ) {
	    if ( cTeam.get(i).getPosX() == x && cTeam.get(i).getPosY() == y ) {
		_isCpu = true;
		return cTeam.get(i);
	    }
	}
	for ( int i = 0; i < pTeam.size(); i++ ) {
	    if ( pTeam.get(i).getPosX() == x && pTeam.get(i).getPosY() == y ) {
		_isCpu = false;
		return pTeam.get(i);
	    }
	}
	return null;
    }

    //=================SET CHARACTER POSITION ON RANDOM MAP SQUARE=============

    public void setPos() {
	for ( Character x : cTeam ) {
	    setOnMapC( x );
	}
	for ( Character x : pTeam ) {
	    setOnMapP( x );
	}	
    }
    
    public void setOnMapC( Character x ) {
    	int xcoor = (int)(grid.length*.75)+(int)(Math.random()*grid.length*.25);
    	int ycoor = (int)(grid[0].length*.75)+(int)(Math.random()*grid[0].length*.25);
    	if ( !anyChars(xcoor,ycoor) ){
      	    grid[xcoor][ycoor].setText("hi");
    	    x.setXY( xcoor, ycoor ); 
    	}
	else { setOnMapC( x ); };
    }

    public void setOnMapP( Character x ) {
    	int xcor = (int)(Math.random()*grid.length*.25);
    	int ycor = (int)(Math.random()*grid[0].length*.25);

    	if ( !anyChars(xcor,ycor) ){
	    grid[xcor][ycor].setText("hi");
    	    x.setXY( xcor, ycor ); 
    	}
	else { setOnMapP( x ); };
    }

    //========================================================

    public void actionPerformed( ActionEvent event ) {
	
	JButton source = (JButton)event.getSource();
	
	if ( source != act1 && source != act2 &&
	     source != act3 && source != act4 ) { 
	    //Button's x and y coordinates
	    int bx = 0;
	    int by = 0;

	    //Successfully returns the button's x and y coords!
	    //event.getSource taken from util.EventObject finds the name of the button that was clicked. So you go through the grid searching for that button and later get its x and y coord

	    for ( int x = 0; x < grid.length; x++ ) {
		for ( int y = 0; y < grid[0].length; y++ ) {
		    if( grid[x][y] == source ) { 
			bx = x;
			by = y;
		    }
		}
	    }
	    //Select Character and do stuff
	    if ( _SelectChar || _ClickAct ) { 
		if ( listChar( bx, by ) == null ) {
		    System.out.println( "Select again." );
		}

		else if ( _isCpu ) {
		    stats.setText(listChar( bx, by ).toString());
		    if ( _ClickAct ) {
			target = listChar( bx, by );
			selection.action1(target);
			_ClickAct = false;
		    }
		}
	    
		else {
		    stats.setText(listChar( bx, by ).toString());

		    if ( _ClickAct ) {
			target = listChar( bx, by );
			_ClickAct = false;
			_SelectChar = true;
			selection.action1(target);

		    }

		    else 
			selection = ( listChar( bx, by ) );
		    
		}	
	    }
	}
	    
  //=============Perform actions==================

	else if ( source.equals( act1 ) && selection != null ) {
	    _ClickAct = true;
	    _SelectChar = false;
	}
    }
		

    public static void main ( String args[] ) {
	Player dude = new Player();
	Field testmap = new Field(10,10,dude);
    }
}
